{"version":3,"sources":["types/index.ts","components/number-display/number-display.tsx","utills/index.ts","constants/index.ts","components/button/Button.tsx","components/app/App.tsx","index.tsx"],"names":["CellValue","CellState","Face","NumberDisplay","value","className","Math","abs","toString","padStart","grabAllAdjacentCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","generateCells","row","push","col","none","state","open","bombsPlaced","randomRow","floor","random","randomCol","bomb","map","cell","rowIndex","colIndex","currentCell","numberOfBombs","Button","red","onClick","onContext","visible","onContextMenu","role","aria-label","flagged","App","useState","setCells","smile","face","setFace","time","setTime","life","setLife","flagCounter","setFlagCounter","didLost","setDidLost","didWon","setDidWon","useEffect","handleMousedown","worried","handleMouseUp","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","lost","won","handleCellClick","newCells","slice","isBomb","showBombsAfterLoss","openMultipleCells","safeOpenSpaceExist","handleRightClick","e","preventDefault","currentCells","setTimeout","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAAYA,EAcAC,EASAC,E,sDCRGC,G,YAPoC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACjD,OACI,yBAAMC,UAAU,kBAAkBD,EAAQ,EAAR,WAAgBE,KAAKC,IAAIH,GAAOI,WAAWC,SAAS,EAAE,MAASL,EAAMI,WAAWC,SAAS,EAAE,S,SDVzHT,O,eAAAA,I,aAAAA,I,aAAAA,I,iBAAAA,I,eAAAA,I,eAAAA,I,aAAAA,I,iBAAAA,I,iBAAAA,I,gBAAAA,M,cAcAC,O,eAAAA,I,qBAAAA,I,sBAAAA,M,cASAC,K,qBAAAA,E,uBAAAA,E,oBAAAA,E,oBAAAA,M,KEjBZ,IAAMQ,EAAuB,SAACC,EAAiBC,EAAkBC,GAoB7D,MAAO,CACHC,YAXgBF,EAAW,GAAKC,EAAW,EAAIF,EAAMC,EAAW,GAAGC,EAAW,GAAK,KAYnFE,QAXYH,EAAW,EAAID,EAAMC,EAAW,GAAGC,GAAY,KAY3DG,aAXiBJ,EAAW,GAAKC,EAAWI,EAAeN,EAAMC,EAAW,GAAGC,EAAW,GAAK,KAY/FK,SAXaL,EAAW,EAAIF,EAAMC,GAAUC,EAAW,GAAK,KAY5DM,UAXcN,EAAWI,EAAeN,EAAMC,GAAUC,EAAW,GAAK,KAYxEO,eAXmBR,EAAWS,GAAgBR,EAAW,EAAIF,EAAMC,EAAW,GAAGC,EAAW,GAAK,KAYjGS,WAXeV,EAAWS,EAAeV,EAAMC,EAAW,GAAGC,GAAY,KAYzEU,gBAXoBX,EAAWS,GAAgBR,EAAWI,EAAeN,EAAMC,EAAW,GAAGC,EAAW,GAAK,OAgBxGW,EAAgB,WAEzB,IADA,IAAIb,EAAoB,GACfc,EAAM,EAAGA,ECzCE,EDyCcA,IAAO,CACrCd,EAAMe,KAAK,IACX,IAAK,IAAIC,EAAM,EAAGA,EC1CF,ED0CkBA,IAC9BhB,EAAMc,GAAKC,KAAK,CACZtB,MAAOJ,EAAU4B,KACjBC,MAAO5B,EAAU6B,OAM7B,IADA,IAAIC,EAAc,EAZuB,aAcrC,IAAMC,EAAY1B,KAAK2B,MCrDP,EDqDa3B,KAAK4B,UAC5BC,EAAY7B,KAAK2B,MCrDP,EDqDa3B,KAAK4B,UACdvB,EAAMqB,GAAWG,GACrB/B,QAAUJ,EAAUoC,OAChCzB,EAAQA,EAAM0B,KAAI,SAACZ,EAAKb,GAAN,OAAmBa,EAAIY,KAAI,SAACC,EAAMzB,GAChD,OAAImB,IAAcpB,GAAYuB,IAActB,EACjC,eACAyB,EADP,CAEIlC,MAAOJ,EAAUoC,OAGlBE,QAEXP,MAdDA,EClDiB,IDkDY,IAmBpC,IAAK,IAAIQ,EAAW,EAAGA,ECvEH,EDuEwBA,IACxC,IAAK,IAAIC,EAAW,EAAGA,ECvEP,EDuE4BA,IAAY,CACpD,IAAMC,EAAc9B,EAAM4B,GAAUC,GACpC,GAAIC,EAAYrC,QAAUJ,EAAUoC,KAApC,CAGA,IAAIM,EAAgB,EALgC,EAM6DhC,EAAqBC,EAAO4B,EAAUC,GAA/I1B,EAN4C,EAM5CA,YAAaC,EAN+B,EAM/BA,QAASC,EANsB,EAMtBA,aAAcE,EANQ,EAMRA,SAAUC,EANF,EAMEA,UAAWC,EANb,EAMaA,eAAgBE,EAN7B,EAM6BA,WAAYC,EANzC,EAMyCA,gBAEzFT,GAAeA,EAAYV,QAAUJ,EAAUoC,MAC/CM,IAEA3B,GAAWA,EAAQX,QAAUJ,EAAUoC,MACvCM,IAEA1B,GAAgBA,EAAaZ,QAAUJ,EAAUoC,MACjDM,IAEAxB,GAAYA,EAASd,QAAUJ,EAAUoC,MACzCM,IAEAvB,GAAaA,EAAUf,QAAUJ,EAAUoC,MAC3CM,IAEAtB,GAAkBA,EAAehB,QAAUJ,EAAUoC,MACrDM,IAEApB,GAAcA,EAAWlB,QAAUJ,EAAUoC,MAC7CM,IAEAnB,GAAmBA,EAAgBnB,QAAUJ,EAAUoC,MACvDM,IAGAA,EAAgB,IAChB/B,EAAM4B,GAAUC,GAAhB,eACOC,EADP,CAEIrC,MAAOsC,MAWvB,OAAO/B,GEzEIgC,G,MAhCuB,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,IAAKnB,EAAiD,EAAjDA,IAAKE,EAA4C,EAA5CA,IAAKkB,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,UAAWjB,EAAmB,EAAnBA,MAAOzB,EAAY,EAAZA,MAsB9E,OAAQ,yBAAKC,UAAS,iBAAYwB,IAAU5B,EAAU8C,QAAU,UAAY,GAAtD,yBACZ3C,EADY,mBAElBwC,EAAM,MAAO,MACbC,QAASA,EAAQpB,EAAKE,GACtBqB,cAAeF,EAAUrB,EAAKE,IAxB1BE,IAAU5B,EAAU8C,QAChB3C,IAAUJ,EAAUoC,KACb,0BAAMa,KAAK,MAAMC,aAAW,QAA5B,gBAKF9C,IAAUJ,EAAU4B,KAClB,KAGJxB,EACAyB,IAAU5B,EAAUkD,QACpB,0BAAMF,KAAK,MAAMC,aAAW,QAA5B,gBAIJ,QCsLAE,EA9MO,WAAO,IAAD,EAEEC,mBAAmB7B,KAFrB,mBAEjBb,EAFiB,KAEV2C,EAFU,OAGAD,mBAAenD,EAAKqD,OAHpB,mBAGjBC,EAHiB,KAGXC,EAHW,OAIAJ,mBAAiB,GAJjB,mBAIjBK,EAJiB,KAIXC,EAJW,OAKAN,oBAAkB,GALlB,mBAKjBO,EALiB,KAKXC,EALW,OAMcR,mBAAiB,IAN/B,mBAMjBS,EANiB,KAMJC,EANI,OAOMV,oBAAkB,GAPxB,mBAOjBW,EAPiB,KAORC,EAPQ,OAQIZ,oBAAkB,GARtB,mBAQjBa,EARiB,KAQTC,EARS,KAUxBC,qBAAU,WACN,IAAMC,EAAkB,WACpBZ,EAAQvD,EAAKoE,UAGXC,EAAgB,WAClBd,EAAQvD,EAAKqD,QAKjB,OAFAiB,OAAOC,iBAAiB,YAAaJ,GACrCG,OAAOC,iBAAiB,UAAWF,GAC5B,WACHC,OAAOE,oBAAoB,YAAaL,GACxCG,OAAOE,oBAAoB,UAAWH,MAE3C,IAEHH,qBAAU,WACN,GAAIR,GAAQF,EAAO,IAAK,CACpB,IAAMiB,EAAQC,aAAY,WACtBjB,EAAQD,EAAO,KAChB,KAEH,OAAO,WACHmB,cAAcF,OAGvB,CAACf,EAAMF,IAGVU,qBAAU,WACFJ,IACAP,EAAQvD,EAAK4E,MACbjB,GAAQ,MAGb,CAACG,IAEJI,qBAAU,WACFF,IACAL,GAAQ,GACRJ,EAAQvD,EAAK6E,QAElB,CAACb,IAEJ,IAAMc,EAAkB,SAACpE,EAAkBC,GAAnB,OAAwC,WAC5D,IAAIoE,EAAWtE,EAAMuE,QACrB,IAAKtB,EAAM,CAGP,IADA,IAAIuB,EAASF,EAASrE,GAAUC,GAAUT,QAAUJ,EAAUoC,KACvD+C,GAEH,IADAF,EAAWzD,KACEZ,GAAUC,GAAUT,QAAUJ,EAAUoC,KAAM,CACvD+C,GAAS,EACT,MAIRtB,GAAQ,GAKZ,IAAMpB,EAAcwC,EAASrE,GAAUC,GAGvC,GAAI4B,EAAYZ,QAAU5B,EAAUkD,SAAWV,EAAYZ,QAAU5B,EAAU8C,QAA/E,CAIA,GAAIN,EAAYrC,QAAUJ,EAAUoC,KAMhC,OALA6B,GAAW,GACXgB,EAASrE,GAAUC,GAAU+B,KAAM,EACnCqC,EAAWG,SACX9B,EAAS2B,GAIJxC,EAAYrC,QAAUJ,EAAU4B,KACrCqD,EHwBqB,SAApBI,EAAqB1E,EAAiBC,EAAkBC,GACjE,IAAIoE,EAAWtE,EAAMuE,QAErBD,EAASrE,GAAUC,GAAUgB,MAAQ5B,EAAU8C,QAHiD,MAa5FrC,EAAqBC,EAAOC,EAAUC,GARtCC,EAL4F,EAK5FA,YACAC,EAN4F,EAM5FA,QACAC,EAP4F,EAO5FA,aACAE,EAR4F,EAQ5FA,SACAC,EAT4F,EAS5FA,UACAC,EAV4F,EAU5FA,eACAE,EAX4F,EAW5FA,WACAC,EAZ4F,EAY5FA,gBAoEJ,OAhEe,OAAXT,QAAW,IAAXA,OAAA,EAAAA,EAAae,SAAU5B,EAAU6B,MAAQhB,EAAYV,QAAUJ,EAAUoC,OACrEtB,EAAYV,QAAUJ,EAAU4B,KAChCqD,EAAWI,EAAkBJ,EAAUrE,EAAW,EAAGC,EAAW,GAEhEoE,EAASrE,EAAW,GAAGC,EAAW,GAAGgB,MAAQ5B,EAAU8C,UAIpD,OAAPhC,QAAO,IAAPA,OAAA,EAAAA,EAASc,SAAU5B,EAAU6B,MAAQf,EAAQX,QAAUJ,EAAUoC,OAC7DrB,EAAQX,QAAUJ,EAAU4B,KAC5BqD,EAAWI,EAAkBJ,EAAUrE,EAAW,EAAGC,GAErDoE,EAASrE,EAAW,GAAGC,GAAUgB,MAAQ5B,EAAU8C,UAI3C,OAAZ/B,QAAY,IAAZA,OAAA,EAAAA,EAAca,SAAU5B,EAAU6B,MAAQd,EAAaZ,QAAUJ,EAAUoC,OACvEpB,EAAaZ,QAAUJ,EAAU4B,KACjCqD,EAAWI,EAAkBJ,EAAUrE,EAAW,EAAGC,EAAW,GAEhEoE,EAASrE,EAAW,GAAGC,EAAW,GAAGgB,MAAQ5B,EAAU8C,UAInD,OAAR7B,QAAQ,IAARA,OAAA,EAAAA,EAAUW,SAAU5B,EAAU6B,MAAQZ,EAASd,QAAUJ,EAAUoC,OAC/DlB,EAASd,QAAUJ,EAAU4B,KAC7BqD,EAAWI,EAAkBJ,EAAUrE,EAAUC,EAAW,GAE5DoE,EAASrE,GAAUC,EAAW,GAAGgB,MAAQ5B,EAAU8C,UAI9C,OAAT5B,QAAS,IAATA,OAAA,EAAAA,EAAWU,SAAU5B,EAAU6B,MAAQX,EAAUf,QAAUJ,EAAUoC,OACjEjB,EAAUf,QAAUJ,EAAU4B,KAC9BqD,EAAWI,EAAkBJ,EAAUrE,EAAUC,EAAW,GAE5DoE,EAASrE,GAAUC,EAAW,GAAGgB,MAAQ5B,EAAU8C,UAIzC,OAAd3B,QAAc,IAAdA,OAAA,EAAAA,EAAgBS,SAAU5B,EAAU6B,MAAQV,EAAehB,QAAUJ,EAAUoC,OAC3EhB,EAAehB,QAAUJ,EAAU4B,KACnCqD,EAAWI,EAAkBJ,EAAUrE,EAAW,EAAGC,EAAW,GAEhEoE,EAASrE,EAAW,GAAGC,EAAW,GAAGgB,MAAQ5B,EAAU8C,UAIjD,OAAVzB,QAAU,IAAVA,OAAA,EAAAA,EAAYO,SAAU5B,EAAU6B,MAAQR,EAAWlB,QAAUJ,EAAUoC,OACnEd,EAAWlB,QAAUJ,EAAU4B,KAC/BqD,EAAWI,EAAkBJ,EAAUrE,EAAW,EAAGC,GAErDoE,EAASrE,EAAW,GAAGC,GAAUgB,MAAQ5B,EAAU8C,UAIxC,OAAfxB,QAAe,IAAfA,OAAA,EAAAA,EAAiBM,SAAU5B,EAAU6B,MAAQP,EAAgBnB,QAAUJ,EAAUoC,OAC7Eb,EAAgBnB,QAAUJ,EAAU4B,KACpCqD,EAAWI,EAAkBJ,EAAUrE,EAAW,EAAGC,EAAW,GAEhEoE,EAASrE,EAAW,GAAGC,EAAW,GAAGgB,MAAQ5B,EAAU8C,SAIxDkC,EGxGYI,CAAkBJ,EAAUrE,EAAUC,GAGjDoE,EAASrE,GAAUC,GAAUgB,MAAQ5B,EAAU8C,QAGnD,IADA,IAAIuC,GAAqB,EAChB7D,EAAM,EAAGA,EFxGF,EEwGkBA,IAC9B,IAAK,IAAIE,EAAM,EAAGA,EFxGN,EEwGsBA,IAAO,CACrC,IAAMc,EAAcwC,EAASxD,GAAKE,GAClC,GAAIc,EAAYrC,QAAUJ,EAAUoC,MAAQK,EAAYZ,QAAU5B,EAAU6B,KAAM,CAC9EwD,GAAqB,EACrB,OAKPA,IACDL,EAAWA,EAAS5C,KAAI,SAAAZ,GAAG,OAAIA,EAAIY,KAAI,SAAAC,GACnC,OAAIA,EAAKlC,QAAUJ,EAAUoC,KAClB,eACAE,EADP,CAEIT,MAAO5B,EAAUkD,UAGlBb,QAEX6B,GAAU,IAEdb,EAAS2B,MAKPM,EAAmB,SAAC3E,EAAkBC,GAAnB,OAAwC,SAAC2E,GAE9D,GADAA,EAAEC,iBACG7B,EAAL,CAGA,IAAM8B,EAAe/E,EAAMuE,QACrBzC,EAAc9B,EAAMC,GAAUC,GAChC4B,EAAYZ,QAAU5B,EAAU8C,UAG3BN,EAAYZ,QAAU5B,EAAU6B,MACrC4D,EAAa9E,GAAUC,GAAUgB,MAAQ5B,EAAUkD,QACnDG,EAASoC,GACT3B,EAAeD,EAAc,IACtBrB,EAAYZ,QAAU5B,EAAUkD,UACvCuC,EAAa9E,GAAUC,GAAUgB,MAAQ5B,EAAU6B,KACnDwB,EAASoC,GACT3B,EAAeD,EAAc,QA8B/BsB,EAAqB,WAEvB,OADqBzE,EAAMuE,QACP7C,KAAI,SAAAZ,GAAG,OAAIA,EAAIY,KAAI,SAAAC,GACnC,OAAIA,EAAKlC,QAAUJ,EAAUoC,MACzBuD,YAAW,WACP9B,GAAQ,GACRF,EAAQ,GACRL,EAAS9B,KACTyC,GAAW,GACXE,GAAU,GACVJ,EAAe,MAChB,KACI,eACAzB,EADP,CAEIT,MAAO5B,EAAU8C,WAGlBT,SAIf,OACI,yBAAKjC,UAAU,OACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,CAAeD,MAAO0D,IACtB,yBAAKzD,UAAU,OAAOwC,QAlCV,WACpBgB,GAAQ,GACRF,EAAQ,GACRL,EAAS9B,KACTyC,GAAW,GACXE,GAAU,GACVJ,EAAe,MA6BH,0BAAMd,KAAK,MAAMC,aAAW,QACvBM,IAGT,kBAAC,EAAD,CAAepD,MAAOsD,KAE1B,yBAAKrD,UAAU,QArDZM,EAAM0B,KAAI,SAACZ,EAAKc,GACnB,OAAOd,EAAIY,KAAI,SAACC,EAAME,GAClB,OAAO,kBAAC,EAAD,CAAQoD,IAAG,UAAKrD,EAAL,YAAiBC,GAC/BX,MAAOS,EAAKT,MAAOzB,MAAOkC,EAAKlC,MAC/BqB,IAAKc,EACLZ,IAAKa,EACLK,QAASmC,EACTlC,UAAWyC,EACX3C,IAAKN,EAAKM,eChK9BiD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.875db678.chunk.js","sourcesContent":["export enum CellValue {\r\n    none,\r\n    one,\r\n    two,\r\n    three,\r\n    four,\r\n    five,\r\n    six,\r\n    seven,\r\n    eight,\r\n    bomb\r\n\r\n}\r\n\r\nexport enum CellState {\r\n    open,\r\n    visible,\r\n    flagged\r\n}\r\n\r\n\r\nexport type Cell = { value: CellValue, state: CellState,red?:boolean }\r\n\r\nexport enum Face {\r\n    smile = \"üôÇ\",\r\n    worried = 'üò≤',\r\n    lost = '‚òπÔ∏è',\r\n    won = 'üèÖ'\r\n}","import React from 'react';\r\nimport './number-display.scss'\r\n\r\ninterface NumberDisplayProps{\r\n    value:number\r\n}\r\n\r\n\r\nconst NumberDisplay:React.FC<NumberDisplayProps> = ({value}) => {\r\n    return (\r\n        < div className=\"Number-Display\">{value < 0 ? `-${Math.abs(value).toString().padStart(2,'0')}` : value.toString().padStart(3,\"0\")}</div>\r\n    )\r\n\r\n}\r\n\r\nexport default NumberDisplay","\r\nimport { MAX_COLS, MAX_ROWS, NUM_OF_BOMBS } from '../constants/index';\r\nimport { CellValue, CellState, Cell } from '../types';\r\nimport React from 'react';\r\n\r\n\r\nconst grabAllAdjacentCells = (cells: Cell[][], rowParam: number, colParam: number): {\r\n    topLeftCell: Cell | null,\r\n    topCell: Cell | null,\r\n    topRightCell: Cell | null,\r\n    leftCell: Cell | null,\r\n    rightCell: Cell | null,\r\n    bottomLeftCell: Cell | null,\r\n    bottomCell: Cell | null,\r\n    bottomRightCell: Cell | null,\r\n} => {\r\n    const topLeftCell = rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n    const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\r\n    const topRightCell = rowParam > 0 && colParam < MAX_COLS - 1 ? cells[rowParam - 1][colParam + 1] : null\r\n    const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\r\n    const rightCell = colParam < MAX_COLS - 1 ? cells[rowParam][colParam + 1] : null;\r\n    const bottomLeftCell = rowParam < MAX_ROWS - 1 && colParam > 0 ? cells[rowParam + 1][colParam - 1] : null;\r\n    const bottomCell = rowParam < MAX_ROWS - 1 ? cells[rowParam + 1][colParam] : null;\r\n    const bottomRightCell = rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1 ? cells[rowParam + 1][colParam + 1] : null;\r\n\r\n\r\n    return {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell\r\n    }\r\n}\r\n\r\n//generating cells\r\nexport const generateCells = (): Cell[][] => {\r\n    let cells: (Cell)[][] = [];\r\n    for (let row = 0; row < MAX_ROWS; row++) {\r\n        cells.push([]);\r\n        for (let col = 0; col < MAX_COLS; col++) {\r\n            cells[row].push({\r\n                value: CellValue.none,\r\n                state: CellState.open\r\n            })\r\n\r\n        }\r\n    }\r\n    let bombsPlaced = 0;\r\n    while (bombsPlaced < NUM_OF_BOMBS) {\r\n        const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n        const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n        const cuurentCell = cells[randomRow][randomCol];\r\n        if (cuurentCell.value !== CellValue.bomb) {\r\n            cells = cells.map((row, rowParam) => row.map((cell, colParam) => {\r\n                if (randomRow === rowParam && randomCol === colParam) {\r\n                    return {\r\n                        ...cell,\r\n                        value: CellValue.bomb\r\n                    }\r\n                }\r\n                return cell;\r\n            }))\r\n            bombsPlaced++;\r\n        }\r\n    }\r\n\r\n\r\n    for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n        for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n            const currentCell = cells[rowIndex][colIndex];\r\n            if (currentCell.value === CellValue.bomb) {\r\n                continue;\r\n            }\r\n            let numberOfBombs = 0;\r\n            const { topLeftCell, topCell, topRightCell, leftCell, rightCell, bottomLeftCell, bottomCell, bottomRightCell } = grabAllAdjacentCells(cells, rowIndex, colIndex)\r\n\r\n            if (topLeftCell && topLeftCell.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (topCell && topCell.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (topRightCell && topRightCell.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (leftCell && leftCell.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (rightCell && rightCell.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (bottomLeftCell && bottomLeftCell.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (bottomCell && bottomCell.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (bottomRightCell && bottomRightCell.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n\r\n            if (numberOfBombs > 0) {\r\n                cells[rowIndex][colIndex] = {\r\n                    ...currentCell,\r\n                    value: numberOfBombs\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return cells\r\n}\r\n\r\nexport const openMultipleCells = (cells: Cell[][], rowParam: number, colParam: number): Cell[][] => {\r\n    let newCells = cells.slice()\r\n    // const cuurentCell = newCells[rowParam][colParam];\r\n    newCells[rowParam][colParam].state = CellState.visible\r\n    const {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell\r\n    } = grabAllAdjacentCells(cells, rowParam, colParam);\r\n\r\n\r\n    if (topLeftCell?.state === CellState.open && topLeftCell.value !== CellValue.bomb) {\r\n        if (topLeftCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1)\r\n        } else {\r\n            newCells[rowParam - 1][colParam - 1].state = CellState.visible\r\n        }\r\n\r\n    }\r\n    if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\r\n        if (topCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam - 1, colParam)\r\n        } else {\r\n            newCells[rowParam - 1][colParam].state = CellState.visible\r\n        }\r\n\r\n    }\r\n    if (topRightCell?.state === CellState.open && topRightCell.value !== CellValue.bomb) {\r\n        if (topRightCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1)\r\n        } else {\r\n            newCells[rowParam - 1][colParam + 1].state = CellState.visible\r\n        }\r\n\r\n    }\r\n    if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\r\n        if (leftCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam - 1)\r\n        } else {\r\n            newCells[rowParam][colParam - 1].state = CellState.visible\r\n        }\r\n\r\n    }\r\n    if (rightCell?.state === CellState.open && rightCell.value !== CellValue.bomb) {\r\n        if (rightCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam + 1)\r\n        } else {\r\n            newCells[rowParam][colParam + 1].state = CellState.visible\r\n        }\r\n\r\n    }\r\n    if (bottomLeftCell?.state === CellState.open && bottomLeftCell.value !== CellValue.bomb) {\r\n        if (bottomLeftCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1)\r\n        } else {\r\n            newCells[rowParam + 1][colParam - 1].state = CellState.visible\r\n        }\r\n\r\n    }\r\n    if (bottomCell?.state === CellState.open && bottomCell.value !== CellValue.bomb) {\r\n        if (bottomCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam + 1, colParam)\r\n        } else {\r\n            newCells[rowParam + 1][colParam].state = CellState.visible\r\n        }\r\n\r\n    }\r\n    if (bottomRightCell?.state === CellState.open && bottomRightCell.value !== CellValue.bomb) {\r\n        if (bottomRightCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1)\r\n        } else {\r\n            newCells[rowParam + 1][colParam + 1].state = CellState.visible\r\n        }\r\n\r\n    }\r\n    return newCells;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n            // const topLeftCell = rowIndex > 0 && colIndex > 0 ? cells[rowIndex - 1][colIndex - 1] : null;\r\n            // const topCell = rowIndex > 0 ? cells[rowIndex - 1][colIndex] : null;\r\n            // const topRightCell = rowIndex > 0 && colIndex < MAX_COLS - 1 ? cells[rowIndex - 1][colIndex + 1] : null\r\n            // const leftCell = colIndex > 0 ? cells[rowIndex][colIndex - 1] : null;\r\n            // const rightCell = colIndex < MAX_COLS - 1 ? cells[rowIndex][colIndex + 1] : null;\r\n            // const bottomLeftCell = rowIndex < MAX_ROWS - 1 && colIndex > 0 ? cells[rowIndex + 1][colIndex - 1] : null;\r\n            // const bottomCell = rowIndex < MAX_ROWS - 1 ? cells[rowIndex + 1][colIndex] : null;\r\n            // const bottomRightCell = rowIndex < MAX_ROWS - 1 && colIndex < MAX_COLS - 1 ? cells[rowIndex + 1][colIndex + 1] : null;\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NUM_OF_BOMBS = 10;","import React from 'react';\r\nimport './Button.scss'\r\nimport { CellState, CellValue } from '../../types/index';\r\n\r\ninterface ButtonProps {\r\n    row: number;\r\n    col: number;\r\n    state: CellState;\r\n    value: CellValue;\r\n    onClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n    onContext(rowParam: number, colParam: number): (...args: any[]) => void\r\n    red?: boolean\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({red, row, col, onClick, onContext, state, value }) => {\r\n    const renderContent = (): React.ReactNode => {\r\n        if (state === CellState.visible) {\r\n            if (value === CellValue.bomb) {\r\n                return <span role=\"img\" aria-label=\"bomb\">\r\n                    üí£\r\n            </span>\r\n\r\n            }\r\n            else if (value === CellValue.none) {\r\n                return null;\r\n\r\n            }\r\n            return value;\r\n        } else if (state === CellState.flagged) {\r\n            return <span role=\"img\" aria-label=\"flag\">\r\n                üö©\r\n            </span>\r\n        }\r\n        return null\r\n    }\r\n\r\n    return (<div className={`Button ${state === CellState.visible ? \"visible\" : ''}\r\n      value-${value}\r\n      ${red ? \"red\": null}`}\r\n        onClick={onClick(row, col)}\r\n        onContextMenu={onContext(row, col)}\r\n    >\r\n        {renderContent()}\r\n    </div>)\r\n}\r\n\r\nexport default Button","import React, { useState, useEffect } from 'react';\r\nimport './App.scss';\r\nimport NumberDisplay from '../number-display/number-display';\r\nimport { generateCells, openMultipleCells } from '../../utills/index';\r\nimport Button from '../button/Button';\r\nimport { Face, Cell, CellState, CellValue } from '../../types/index';\r\nimport { MAX_ROWS, MAX_COLS } from '../../constants/index';\r\n\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const [cells, setCells] = useState<Cell[][]>(generateCells());\r\n    const [face, setFace] = useState<Face>(Face.smile);\r\n    const [time, setTime] = useState<number>(0);\r\n    const [life, setLife] = useState<boolean>(false);\r\n    const [flagCounter, setFlagCounter] = useState<number>(10);\r\n    const [didLost, setDidLost] = useState<boolean>(false);\r\n    const [didWon, setDidWon] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        const handleMousedown = () => {\r\n            setFace(Face.worried)\r\n        }\r\n\r\n        const handleMouseUp = () => {\r\n            setFace(Face.smile)\r\n        }\r\n\r\n        window.addEventListener('mousedown', handleMousedown);\r\n        window.addEventListener('mouseup', handleMouseUp);\r\n        return () => {\r\n            window.removeEventListener('mousedown', handleMousedown)\r\n            window.removeEventListener('mouseup', handleMouseUp)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (life && time < 999) {\r\n            const timer = setInterval(() => {\r\n                setTime(time + 1)\r\n            }, 1000);\r\n\r\n            return () => {\r\n                clearInterval(timer)\r\n            }\r\n        }\r\n    }, [life, time])\r\n\r\n\r\n    useEffect(() => {\r\n        if (didLost) {\r\n            setFace(Face.lost);\r\n            setLife(false);\r\n\r\n        }\r\n    }, [didLost])\r\n\r\n    useEffect(() => {\r\n        if (didWon) {\r\n            setLife(false);\r\n            setFace(Face.won);\r\n        }\r\n    }, [didWon])\r\n\r\n    const handleCellClick = (rowParam: number, colParam: number) => (): void => {\r\n        let newCells = cells.slice();\r\n        if (!life) {\r\n\r\n            let isBomb = newCells[rowParam][colParam].value === CellValue.bomb;\r\n            while (isBomb) {\r\n                newCells = generateCells();\r\n                if (newCells[rowParam][colParam].value !== CellValue.bomb) {\r\n                    isBomb = false;\r\n                    break;\r\n\r\n                }\r\n            }\r\n            setLife(true);\r\n\r\n\r\n        }\r\n\r\n        const currentCell = newCells[rowParam][colParam];\r\n\r\n\r\n        if (currentCell.state === CellState.flagged || currentCell.state === CellState.visible) {\r\n            return\r\n        }\r\n\r\n        if (currentCell.value === CellValue.bomb) {\r\n            setDidLost(true)\r\n            newCells[rowParam][colParam].red = true\r\n            newCells = showBombsAfterLoss();\r\n            setCells(newCells);\r\n\r\n            return;\r\n        }\r\n        else if (currentCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam);\r\n        }\r\n        else {\r\n            newCells[rowParam][colParam].state = CellState.visible;\r\n        }\r\n        let safeOpenSpaceExist = false;\r\n        for (let row = 0; row < MAX_ROWS; row++) {\r\n            for (let col = 0; col < MAX_COLS; col++) {\r\n                const currentCell = newCells[row][col]\r\n                if (currentCell.value !== CellValue.bomb && currentCell.state === CellState.open) {\r\n                    safeOpenSpaceExist = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n        }\r\n        if (!safeOpenSpaceExist) {\r\n            newCells = newCells.map(row => row.map(cell => {\r\n                if (cell.value === CellValue.bomb) {\r\n                    return {\r\n                        ...cell,\r\n                        state: CellState.flagged\r\n                    }\r\n                }\r\n                return cell\r\n            }))\r\n            setDidWon(true);\r\n        }\r\n        setCells(newCells);\r\n\r\n    }\r\n\r\n\r\n    const handleRightClick = (rowParam: number, colParam: number) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\r\n        e.preventDefault();\r\n        if (!life) {\r\n            return\r\n        }\r\n        const currentCells = cells.slice();\r\n        const currentCell = cells[rowParam][colParam]\r\n        if (currentCell.state === CellState.visible) {\r\n            return;\r\n        }\r\n        else if (currentCell.state === CellState.open) {\r\n            currentCells[rowParam][colParam].state = CellState.flagged;\r\n            setCells(currentCells);\r\n            setFlagCounter(flagCounter - 1)\r\n        } else if (currentCell.state === CellState.flagged) {\r\n            currentCells[rowParam][colParam].state = CellState.open;\r\n            setCells(currentCells);\r\n            setFlagCounter(flagCounter + 1)\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const renderCells = (): React.ReactNode => {\r\n        return cells.map((row, rowIndex) => {\r\n            return row.map((cell, colIndex) => {\r\n                return <Button key={`${rowIndex}-${colIndex}`}\r\n                    state={cell.state} value={cell.value}\r\n                    row={rowIndex}\r\n                    col={colIndex}\r\n                    onClick={handleCellClick}\r\n                    onContext={handleRightClick}\r\n                    red={cell.red} />\r\n            })\r\n        })\r\n    }\r\n    const handleFaceClick = () => {\r\n        setLife(false);\r\n        setTime(0);\r\n        setCells(generateCells())\r\n        setDidLost(false);\r\n        setDidWon(false)\r\n        setFlagCounter(10);\r\n    }\r\n\r\n    const showBombsAfterLoss = (): Cell[][] => {\r\n        const currentCells = cells.slice();\r\n        return currentCells.map(row => row.map(cell => {\r\n            if (cell.value === CellValue.bomb) {\r\n                setTimeout(() => {\r\n                    setLife(false);\r\n                    setTime(0);\r\n                    setCells(generateCells())\r\n                    setDidLost(false);\r\n                    setDidWon(false)\r\n                    setFlagCounter(10);\r\n                }, 2000);\r\n                return {\r\n                    ...cell,\r\n                    state: CellState.visible\r\n                }\r\n            }\r\n            return cell\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"Header\">\r\n                <NumberDisplay value={flagCounter} />\r\n                <div className=\"Face\" onClick={handleFaceClick}>\r\n                    <span role=\"img\" aria-label=\"face\">\r\n                        {face}\r\n                    </span>\r\n                </div>\r\n                <NumberDisplay value={time} />\r\n            </div>\r\n            <div className=\"Body\">{renderCells()}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}